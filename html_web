<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WebSocket 數據監控</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.3.2/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
      /* 按鈕樣式 */
      #startButton, #stopButton {
          font-size: 24px;
          padding: 15px 30px;
          margin: 20px;
          border-radius: 10px;
          border: none;
          cursor: pointer;
      }
      #startButton { background-color: #28a745; color: white; }
      #stopButton { background-color: #dc3545; color: white; }
      #startButton:hover { background-color: #218838; }
      #stopButton:hover { background-color: #c82333; }
      body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
      .container { display: flex; flex-wrap: wrap; justify-content: center; gap: 20px; }
      .data-container { width: 90%; max-width: 600px; padding: 10px; border: 1px solid #ccc; }
      .history-container { width: 90%; max-width: 600px; height: 200px; overflow-y: auto; border: 1px solid #ddd; text-align: left; padding: 10px; display: flex; flex-direction: column; }
      h2 { color: #333; }
      p { font-size: 18px; color: #555; }
  </style>
</head>
<body>

  <h1>📡 WebSocket 監聽數據</h1>

  <!-- 控制按鈕 -->
  <button id="startButton">開始</button>
  <button id="stopButton">停止</button>

  <div class="container">
      <div class="data-container">
          <h2>🟠 來自 8888 (Roll, Pitch, Yaw, Thrust)</h2>
          <p id="control-data">等待數據...</p>
          <canvas id="controlChart"></canvas>
          <h3>📜 歷史數據</h3>
          <div class="history-container" id="control-history"></div>
      </div>

      <div class="data-container">
          <h2>🔵 來自 8889 (Translation/Rotation)</h2>
          <p id="vicon-data">等待數據...</p>
          <canvas id="viconChart"></canvas>
          <h3>📜 歷史數據</h3>
          <div class="history-container" id="vicon-history"></div>
      </div>
  </div>

  <script>
      // 輔助函式：依指定小數位格式化數字，並去除多餘的尾零
      function formatNumber(num, decimals) {
          let fixed = parseFloat(num).toFixed(decimals);
          return fixed.replace(/\.?0+$/, '');
      }

      // 自動捲動到最新的函式
      function scrollToBottom(id) {
          var element = document.getElementById(id);
          element.scrollTop = element.scrollHeight;
      }

      // WebSocket 變數與歷史資料陣列
      let socket;
      let controlHistory = [];
      let viconHistory = [];
      let controlTimestamps = [];
      let controlValues = { roll: [], pitch: [], yaw: [], thrust: [] };
      let viconTimestamps = [];
      let viconValues = { tran_x: [], tran_y: [], tran_z: [], rot_x: [], rot_y: [], rot_z: [] };

      function startWebSocket() {
          if (!socket || socket.disconnected) {
              socket = io.connect("http://" + window.location.hostname + ":5000", { transports: ["websocket", "polling"] });

              socket.on("connect", function () {
                  console.log("✅ WebSocket 連線成功！");
              });

              socket.on("disconnect", function () {
                  console.warn("⚠️ WebSocket 連線中斷，嘗試重新連線...");
                  setTimeout(() => { socket.connect(); }, 3000);
              });

              socket.on("control_data", function (data) {
                  document.getElementById("control-data").innerText =
                      ` roll: ${data.roll}, pitch: ${data.pitch}, yaw: ${data.yaw}, thrust: ${data.thrust}`;

                  let timestamp = new Date().toLocaleTimeString("zh-TW", { hour12: true });
                  let historyStr = `${timestamp} - ` +
                      `roll:${formatNumber(data.roll, 3)}, ` +
                      `pitch:${formatNumber(data.pitch, 3)}, ` +
                      `yaw:${formatNumber(data.yaw, 3)}, ` +
                      `thrust:${formatNumber(data.thrust, 2)}`;

                  controlHistory.push(historyStr);
                  if (controlHistory.length > 50) controlHistory.shift();
                  document.getElementById("control-history").innerHTML = controlHistory.join("<br>");
                  // 自動捲動到最新
                  scrollToBottom("control-history");

                  controlTimestamps.push(timestamp);
                  controlValues.roll.push(data.roll);
                  controlValues.pitch.push(data.pitch);
                  controlValues.yaw.push(data.yaw);
                  controlValues.thrust.push(data.thrust);
                  controlChart.update();
              });

              socket.on("vicon_data", function (data) {
                  document.getElementById("vicon-data").innerText =
                      `tran_x: ${data.tran_x}, tran_y: ${data.tran_y}, tran_z: ${data.tran_z}, rot_x: ${data.rot_x}`;

                  let timestamp = new Date().toLocaleTimeString("zh-TW", { hour12: true });
                  let historyStr = `${timestamp} - <br>` +
                      `tran_x:${formatNumber(data.tran_x, 3)}, ` +
                      `tran_y:${formatNumber(data.tran_y, 3)}, ` +
                      `tran_z:${formatNumber(data.tran_z, 3)}, ` +
                      `rot_x:${formatNumber(data.rot_x, 3)}, ` +
                      `rot_y:${formatNumber(data.rot_y, 3)}, ` +
                      `rot_z:${formatNumber(data.rot_z, 3)}`;

                  viconHistory.push(historyStr);
                  if (viconHistory.length > 50) viconHistory.shift();
                  document.getElementById("vicon-history").innerHTML = viconHistory.join("<br>");
                  // 自動捲動到最新
                  scrollToBottom("vicon-history");

                  viconTimestamps.push(timestamp);
                  viconValues.tran_x.push(data.tran_x);
                  viconValues.tran_y.push(data.tran_y);
                  viconValues.tran_z.push(data.tran_z);
                  viconValues.rot_x.push(data.rot_x);
                  viconValues.rot_y.push(data.rot_y);
                  viconValues.rot_z.push(data.rot_z);
                  viconChart.update();
              });
          }
      }

      document.getElementById("startButton").addEventListener("click", function() {
          fetch("/start", { method: "POST" })
              .then(response => response.json())
              .then(data => {
                  console.log("收到開始回應:", data);
                  startWebSocket();
              })
              .catch(err => console.error(err));
      });

      document.getElementById("stopButton").addEventListener("click", function() {
          fetch("/stop", { method: "POST" })
              .then(response => response.json())
              .then(data => {
                  console.log("收到停止回應:", data);
              })
              .catch(err => console.error(err));
      });

      // 控制圖表初始化
      let ctxControl = document.getElementById('controlChart').getContext('2d');
      let controlChart = new Chart(ctxControl, {
          type: "line",
          data: {
              labels: controlTimestamps,
              datasets: [
                  { label: "Roll", data: controlValues.roll, borderColor: "red", fill: false },
                  { label: "Pitch", data: controlValues.pitch, borderColor: "blue", fill: false },
                  { label: "Yaw", data: controlValues.yaw, borderColor: "green", fill: false },
                  { label: "Thrust", data: controlValues.thrust, borderColor: "purple", fill: false }
              ]
          },
          options: { responsive: true, scales: { x: { display: true }, y: { display: true } } }
      });

      // Vicon 圖表初始化，新增 rot_x, rot_y, rot_z 的資料集
      let ctxVicon = document.getElementById('viconChart').getContext('2d');
      let viconChart = new Chart(ctxVicon, {
          type: "line",
          data: {
              labels: viconTimestamps,
              datasets: [
                  { label: "tran_x", data: viconValues.tran_x, borderColor: "red", fill: false },
                  { label: "tran_y", data: viconValues.tran_y, borderColor: "blue", fill: false },
                  { label: "tran_z", data: viconValues.tran_z, borderColor: "green", fill: false },
                  { label: "rot_x",  data: viconValues.rot_x,  borderColor: "orange", fill: false },
                  { label: "rot_y",  data: viconValues.rot_y,  borderColor: "purple", fill: false },
                  { label: "rot_z",  data: viconValues.rot_z,  borderColor: "brown", fill: false }
              ]
          },
          options: { responsive: true, scales: { x: { display: true }, y: { display: true } } }
      });
  </script>
</body>
</html>
